package telegram

import (
	"context"
	"fmt"
	"strings"
	"time"

	"github.com/SobolevTim/finance_bot/internal/service"
	"github.com/mymmrac/telego"
	tu "github.com/mymmrac/telego/telegoutil"
)

const daysPerPage = 7

// handleInline –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏
func (b *Bot) inlinehandlers(update telego.Update) {
	callbackData := update.CallbackQuery.Data
	chatID := update.CallbackQuery.From.ID
	b.logger.Debug("–ü–æ–ª—É—á–µ–Ω–æ –∏–Ω–ª–∞–π–Ω-—Å–æ–±—ã—Ç–∏–µ", "callbackData", callbackData, "tgID", chatID)

	if strings.HasPrefix(callbackData, "expenses_page_") {
		var page int
		_, err := fmt.Sscanf(callbackData, "expenses_page_%d", &page)
		if err != nil {
			return
		}
		b.handleExpenseCommand(chatID, page)
	} else if strings.HasPrefix(callbackData, "add_") {
		// –û–±—Ä–∞–±–æ—Ç–∫–∞ inline-–∫–Ω–æ–ø–æ–∫ –¥–ª—è –∑–∞–ø–∏—Å–∏ —Ä–∞—Å—Ö–æ–¥–∞.
		b.HandleAddExpenseCallback(chatID, callbackData)
	}
}

// handleExpenseCommand –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /expense
func (b *Bot) handleExpenseCommand(chatID int64, page int) {
	now := time.Now()
	weekday := int(now.Weekday())
	if weekday == 0 {
		weekday = 7 // –í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ -> 7
	}

	// –í—ã—á–∏—Å–ª—è–µ–º –Ω–∞—á–∞–ª–æ –Ω–µ–¥–µ–ª–∏ (–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫) –∏ —Å–¥–≤–∏–≥–∞–µ–º –Ω–∞ –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–¥–µ–ª—å
	startOfWeek := now.AddDate(0, 0, -weekday+1-(page*7)).Truncate(24 * time.Hour)
	endOfWeek := startOfWeek.AddDate(0, 0, 6)

	ctx, cancel := context.WithTimeout(context.Background(), 3*time.Second)
	defer cancel()

	expenses, err := b.Service.GetExpenses(ctx, chatID, startOfWeek, endOfWeek)
	if err != nil {
		b.SendErrorMessage(chatID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ —Ä–∞—Å—Ö–æ–¥–∞—Ö")
		return
	}

	totalSum, avgExpense, maxExpense, maxDate := calculateSummary(expenses)

	message := fmt.Sprintf(
		"*–û–±–∑–æ—Ä —Ä–∞—Å—Ö–æ–¥–æ–≤ –∑–∞ –Ω–µ–¥–µ–ª—é (%s - %s):*\n"+
			"- –û–±—â–∞—è —Å—É–º–º–∞: %.2f‚ÇΩ\n"+
			"- –°—Ä–µ–¥–Ω–∏–π —Ä–∞—Å—Ö–æ–¥: %.2f‚ÇΩ\n"+
			"- –ú–∞–∫—Å. —Ä–∞—Å—Ö–æ–¥: %.2f‚ÇΩ (%s)\n\n",
		startOfWeek.Format("02.01.2006"), endOfWeek.Format("02.01.2006"),
		totalSum, avgExpense, maxExpense, maxDate.Format("02.01.2006"),
	)

	for _, exp := range expenses {
		message += fmt.Sprintf("üìÖ %s: %.2f‚ÇΩ\n", exp.Date.Format("02.01.2006"), exp.Amount)
	}

	// –ò–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –Ω–µ–¥–µ–ª—å
	inlineKeyboard := tu.InlineKeyboard(
		tu.InlineKeyboardRow(
			tu.InlineKeyboardButton("‚¨Ö –ü—Ä–µ–¥. –Ω–µ–¥–µ–ª—è").WithCallbackData(fmt.Sprintf("expenses_page_%d", page+1)),
			tu.InlineKeyboardButton("–°–ª–µ–¥. –Ω–µ–¥–µ–ª—è ‚û°").WithCallbackData(fmt.Sprintf("expenses_page_%d", page-1)),
		),
	)

	b.SendMessageWithKeyboard(chatID, message, inlineKeyboard)
}

// calculateSummary –≤—ã—á–∏—Å–ª—è–µ—Ç —Å–≤–æ–¥–∫—É —Ä–∞—Å—Ö–æ–¥–æ–≤
func calculateSummary(expenses []*service.ExpenseDTO) (total float64, avg float64, max float64, maxDate time.Time) {
	if len(expenses) == 0 {
		return 0, 0, 0, time.Time{}
	}
	for _, exp := range expenses {
		total += exp.Amount
		if exp.Amount > max {
			max = exp.Amount
			maxDate = exp.Date
		}
	}
	avg = total / float64(len(expenses))
	return total, avg, max, maxDate
}

// HandleAddExpenseCallback –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç inline-–∫–Ω–æ–ø–∫–∏ –¥–ª—è –∑–∞–ø–∏—Å–∏ —Ä–∞—Å—Ö–æ–¥–∞.
func (b *Bot) HandleAddExpenseCallback(chatID int64, callbackData string) {
	ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)
	defer cancel()
	entry, err := b.Service.GetExpenseStatus(ctx, chatID)
	if err != nil || entry == nil {
		b.logger.Error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–ø–∏—Å–∏ —Ä–∞—Å—Ö–æ–¥–∞", "error", err)
		b.SendErrorMessage(chatID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")
		return
	}

	switch callbackData {
	case "add_date_today":
		entry.Date = time.Date(time.Now().Year(), time.Now().Month(), time.Now().Day(), 0, 0, 0, 0, time.UTC)
		entry.Step = "amount"
		err := b.Service.SetExpenseStatus(ctx, chatID, entry)
		if err != nil {
			b.logger.Error("–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–ø–∏—Å–∏ —Ä–∞—Å—Ö–æ–¥–∞", "error", err)
			b.SendErrorMessage(chatID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")
			return
		}
		b.sendAmountPrompt(chatID)
	case "add_date_custom":
		// –ü—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ –¥–∞—Ç—É —Ç–µ–∫—Å—Ç–æ–º.
		entry.Step = "date_input"
		err := b.Service.SetExpenseStatus(ctx, chatID, entry)
		if err != nil {
			b.logger.Error("–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–ø–∏—Å–∏ —Ä–∞—Å—Ö–æ–¥–∞", "error", err)
			b.SendErrorMessage(chatID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")
			return
		}
		b.sendTextPrompt(chatID, "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 23.03.2025):")
	default:
		// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏. –û–∂–∏–¥–∞–µ—Ç—Å—è —Ñ–æ—Ä–º–∞—Ç "add_category_<Category>"
		if strings.HasPrefix(callbackData, "add_category_") {
			cat := strings.TrimPrefix(callbackData, "add_category_")
			entry.Category = cat
			entry.Step = "note"
			err := b.Service.SetExpenseStatus(ctx, chatID, entry)
			if err != nil {
				b.logger.Error("–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–ø–∏—Å–∏ —Ä–∞—Å—Ö–æ–¥–∞", "error", err)
				b.SendErrorMessage(chatID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")
				return
			}
			// –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–º–µ—á–∞–Ω–∏–µ –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å
			keyboard := tu.InlineKeyboard(
				tu.InlineKeyboardRow(
					tu.InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–º–µ—á–∞–Ω–∏–µ").WithCallbackData("add_note"),
					tu.InlineKeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å").WithCallbackData("add_skip_note"),
				),
			)

			b.SendMessageWithKeyboard(chatID, "–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–º–µ—á–∞–Ω–∏–µ?", keyboard)
		} else if callbackData == "add_note" {
			entry.Step = "note_input"
			err := b.Service.SetExpenseStatus(ctx, chatID, entry)
			if err != nil {
				b.logger.Error("–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–ø–∏—Å–∏ —Ä–∞—Å—Ö–æ–¥–∞", "error", err)
				b.SendErrorMessage(chatID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")
				return
			}
			b.sendTextPrompt(chatID, "–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏–º–µ—á–∞–Ω–∏–µ:")
		} else if callbackData == "add_skip_note" {
			entry.Note = ""
			entry.Step = "confirm"
			err := b.Service.SetExpenseStatus(ctx, chatID, entry)
			if err != nil {
				b.logger.Error("–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–ø–∏—Å–∏ —Ä–∞—Å—Ö–æ–¥–∞", "error", err)
				b.SendErrorMessage(chatID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")
				return
			}
			b.sendConfirmation(chatID, entry)
		} else if callbackData == "add_confirm" {
			// –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ —Ä–∞—Å—Ö–æ–¥–∞
			if err := b.Service.AddExpense(ctx, chatID, entry.Amount, entry.Date, entry.Category, entry.Note); err != nil {
				b.SendErrorMessage(chatID, "–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ —Ä–∞—Å—Ö–æ–¥–∞.")
			} else {
				b.SendMessage(chatID, "‚úÖ –†–∞—Å—Ö–æ–¥ –∑–∞–ø–∏—Å–∞–Ω!")
			}
			b.Service.DeleteStatus(ctx, chatID)
		} else if callbackData == "add_cancel" {
			b.SendErrorMessage(chatID, "–ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞.")
			b.Service.DeleteStatus(ctx, chatID)
		}
	}
	// –û—Ç–≤–µ—Ç –Ω–∞ callback –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏.
}
