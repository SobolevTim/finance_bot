package telegram

import (
	"context"
	"fmt"
	"time"

	"github.com/SobolevTim/finance_bot/internal/service"
	"github.com/mymmrac/telego"
	tu "github.com/mymmrac/telego/telegoutil"
)

// handlersCmd –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
//
// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥:
// /start - —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
// /cancel - –æ—Ç–º–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏
// /help - –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø—Ä–∞–≤–∫–∏
// /setbudget - —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –±—é–¥–∂–µ—Ç–∞
func (b *Bot) handlersCmd(update telego.Update) {
	b.logger.Debug("–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞", "command", update.Message.Text, "tgID", update.Message.Chat.ID)
	switch update.Message.Text {
	case "/start":
		b.handlersStart(update)
	case "/cancel":
		b.handlersCancel(update)
	case "/help":
		b.SendMessage(update.Message.Chat.ID, "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n/start - —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è\n/cancel - –æ—Ç–º–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏\n/setbudget - —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –±—é–¥–∂–µ—Ç–∞\n/getbudget - –ø–æ–ª—É—á–µ–Ω–∏–µ –±—é–¥–∂–µ—Ç–∞\n/expense - –ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å—Ö–æ–¥–æ–≤\n/add - –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–∞")
	case "/setbudget":
		b.handlersSetBudget(update)
	case "/getbudget":
		b.handlersGetBudget(update)
	case "/expense":
		b.handleExpenseCommand(update.Message.Chat.ID, 0)
	case "/month":
		b.handleMonthCommand(update.Message.Chat.ID)
	case "/add":
		b.StartAddExpense(update.Message.Chat.ID)
	default:
		b.logger.Debug("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞", "command", update.Message.Text)
		b.SendMessage(update.Message.Chat.ID, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
	}
}

// handlersStart –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã start
//
// –ü—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
// –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ–º –∏ –±—é–¥–∂–µ—Ç–æ–º
func (b *Bot) handlersStart(update telego.Update) {
	b.logger.Debug("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã start", "tgID", update.Message.Chat.ID)

	ctx, cancel := context.WithTimeout(context.Background(), 3*time.Second)
	defer cancel()

	userName := update.Message.From.Username
	firstName := update.Message.Chat.FirstName
	lastName := update.Message.Chat.LastName

	if update.Message.Chat.ID < 0 { // –¥–ª—è –≥—Ä—É–ø–ø—ã ID = -1234567890
		userName = update.Message.Chat.Title
		firstName = update.Message.Chat.Title
		lastName = update.Message.Chat.Title
	}

	user, err := b.Service.RegisterUser(ctx, update.Message.Chat.ID, userName, firstName, lastName)

	if err != nil {
		b.logger.Error("–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", "error", err)
		b.SendErrorMessage(update.Message.Chat.ID, "–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")
		return
	}

	// –ü–æ–ª—É—á–µ–Ω–∏–µ –±—é–¥–∂–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	budget, err := b.Service.GetCurrentBudget(ctx, user.ID)
	if err != nil {
		b.logger.Error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±—é–¥–∂–µ—Ç–∞", "error", err)
		b.SendErrorMessage(update.Message.Chat.ID, "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±—é–¥–∂–µ—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")
		return
	}

	if budget == nil {
		b.logger.Debug("–ë—é–¥–∂–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", "userID", user.ID)
		b.SendMessage(update.Message.Chat.ID, "üí∞–ë—é–¥–∂–µ—Ç –Ω–∞ –º–µ—Å—è—Ü –µ—â–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!\n–ù–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –∑–∞–∫–ª–∞–¥—ã–≤–∞–µ—Ç–µ –Ω–∞ –º–µ—Å—è—Ü")
		err := b.Service.SetStatus(ctx, update.Message.Chat.ID, StatusBudget)
		if err != nil {
			b.logger.Error("–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å—Ç–∞—Ç—É—Å–∞", "error", err)
			b.SendErrorMessage(update.Message.Chat.ID, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ —á—É—Ç—å –ø–æ–∑–∂–µ")
		}
		return
	}
	// –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
	text := fmt.Sprintf("–ü—Ä–∏–≤–µ—Ç, %s!\n–Ø –±–æ—Ç –¥–ª—è –≤–µ–¥–µ–Ω–∏—è –±—é–¥–∂–µ—Ç–∞.\n–í–∞—à –±—é–¥–∂–µ—Ç –Ω–∞ –º–µ—Å—è—Ü %.2f", user.UserName, budget.Amount.InexactFloat64())

	// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
	b.SendMessage(update.Message.Chat.ID, text)
}

// handlersCancel –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã cancel
//
// –ü—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã –æ—Ç–º–µ–Ω—è–µ—Ç —Ç–µ–∫—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é
// –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç–º–µ–Ω–µ
func (b *Bot) handlersCancel(update telego.Update) {
	b.logger.Debug("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã cancel", "tgID", update.Message.Chat.ID)

	ctx, cancel := context.WithTimeout(context.Background(), 3*time.Second)
	defer cancel()

	err := b.Service.SetStatus(ctx, update.Message.Chat.ID, "")
	if err != nil {
		b.logger.Error("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞", "error", err)
		b.SendErrorMessage(update.Message.Chat.ID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")
		return
	}

	text := "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞"
	b.SendMessage(update.Message.Chat.ID, text)
}

// handlersSetBudget –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –±—é–¥–∂–µ—Ç–∞
//
// –ü—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ StatusBudget
// –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ—Å—å–±–æ–π —É–∫–∞–∑–∞—Ç—å –±—é–¥–∂–µ—Ç
func (b *Bot) handlersSetBudget(update telego.Update) {
	b.logger.Debug("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã setbudget", "tgID", update.Message.Chat.ID)

	ctx, cancel := context.WithTimeout(context.Background(), 3*time.Second)
	defer cancel()

	err := b.Service.SetStatus(ctx, update.Message.Chat.ID, StatusBudget)
	if err != nil {
		b.logger.Error("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞", "error", err)
		b.SendErrorMessage(update.Message.Chat.ID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")
		return
	}

	text := "–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –±—é–¥–∂–µ—Ç –Ω–∞ –º–µ—Å—è—Ü"
	b.SendMessage(update.Message.Chat.ID, text)
}

// handlersGetBudget –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –ø–æ–ª—É—á–µ–Ω–∏—è –±—é–¥–∂–µ—Ç–∞
//
// –ü—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—É—â–∏–º –±—é–¥–∂–µ—Ç–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
// –ï—Å–ª–∏ –±—é–¥–∂–µ—Ç –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —ç—Ç–æ–º
func (b *Bot) handlersGetBudget(update telego.Update) {
	b.logger.Debug("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã getbudget", "tgID", update.Message.Chat.ID)

	ctx, cancel := context.WithTimeout(context.Background(), 3*time.Second)
	defer cancel()

	user, err := b.Service.GetUserByTelegramID(ctx, update.Message.Chat.ID)
	if err != nil {
		b.logger.Error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", "error", err)
		b.SendErrorMessage(update.Message.Chat.ID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")
		return
	}

	budget, err := b.Service.GetCurrentBudget(ctx, user.ID)
	if err != nil {
		b.logger.Error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±—é–¥–∂–µ—Ç–∞", "error", err)
		b.SendErrorMessage(update.Message.Chat.ID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")
		return
	}

	if budget == nil {
		b.SendMessage(update.Message.Chat.ID, "–ë—é–¥–∂–µ—Ç –Ω–∞ –º–µ—Å—è—Ü –µ—â–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
		return
	}

	text := fmt.Sprintf("–í–∞—à –±—é–¥–∂–µ—Ç –Ω–∞ –º–µ—Å—è—Ü %.2f", budget.Amount.InexactFloat64())
	b.SendMessage(update.Message.Chat.ID, text)
}

// StartAddExpense –∏–Ω–∏—Ü–∏–∏—Ä—É–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–ø–∏—Å–∏ —Ä–∞—Å—Ö–æ–¥–∞.
func (b *Bot) StartAddExpense(chatID int64) {
	// –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–ø–∏—Å–∏
	ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)
	defer cancel()
	b.Service.SetExpenseStatus(ctx, chatID, &service.ExpenseEntryDTO{
		Step: "date",
	})

	message := "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è –∑–∞–ø–∏—Å–∏ —Ä–∞—Å—Ö–æ–¥–∞:"
	keyboard := tu.InlineKeyboard(
		tu.InlineKeyboardRow(
			tu.InlineKeyboardButton("–°–µ–≥–æ–¥–Ω—è").WithCallbackData("add_date_today"),
			tu.InlineKeyboardButton("–£–∫–∞–∑–∞—Ç—å –¥–∞—Ç—É").WithCallbackData("add_date_custom"),
		),
	)
	msg := tu.Message(tu.ID(chatID), message).WithReplyMarkup(keyboard)
	b.Client.SendMessage(ctx, msg)
}

// handleMonthCommand –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /month
//
// –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–∞—Å—Ö–æ–¥–æ–≤ –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
func (b *Bot) handleMonthCommand(chatID int64) {
	b.logger.Debug("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã month", "tgID", chatID)

	ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)
	defer cancel()

	// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤ –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
	expenses, sumExp, err := b.Service.GetExpensesByMonth(ctx, chatID)
	if err != nil {
		b.logger.Error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–æ–≤ –∑–∞ –º–µ—Å—è—Ü", "error", err)
		b.SendErrorMessage(chatID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")
		return
	}

	user, err := b.Service.GetUserByTelegramID(ctx, chatID)
	if err != nil {
		b.logger.Error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", "error", err)
		b.SendErrorMessage(chatID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")
		return
	}

	budget, err := b.Service.GetCurrentBudget(ctx, user.ID)
	if err != nil {
		b.logger.Error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±—é–¥–∂–µ—Ç–∞", "error", err)
		b.SendErrorMessage(chatID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")
		return
	}

	if budget == nil {
		b.SendMessage(chatID, "–ë—é–¥–∂–µ—Ç –Ω–∞ –º–µ—Å—è—Ü –µ—â–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
		return
	}
	userBudget := budget.Amount.InexactFloat64()

	// –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
	text := fmt.Sprintf("üôà –†–∞—Å—Ö–æ–¥—ã –∑–∞ –º–µ—Å—è—Ü:\n")
	text += fmt.Sprintf("–í—Å–µ–≥–æ –ø–æ—Ç—Ä–∞—á–µ–Ω–æ: %.2f\n", sumExp)
	text += fmt.Sprintf("–ë—é–¥–∂–µ—Ç –Ω–∞ –º–µ—Å—è—Ü: %.2f\n", userBudget)
	text += fmt.Sprintf("–û—Å—Ç–∞–ª–æ—Å—å: %.2f\n", userBudget-sumExp)
	daysLeft := time.Now().AddDate(0, 0, 1).Day() - time.Now().Day()
	text += fmt.Sprintf("–°—Ä–µ–¥–Ω–µ–µ –Ω–∞ –¥–µ–Ω—å –æ—Å—Ç–∞–ª–æ—Å—å: %.2f\n", (userBudget-sumExp)/float64(daysLeft))
	startDate := time.Date(time.Now().Year(), time.Now().Month(), 1, 0, 0, 0, 0, time.UTC)
	endDate := startDate.AddDate(0, 1, -1)
	text += fmt.Sprintf("–ò–∑–Ω–∞–Ω–∞—á–∞–ª—å–Ω–æ–µ —Å—Ä–µ–¥–Ω–µ–µ: %.2f\n", userBudget/float64(endDate.Day()))

	// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
	b.SendMessage(chatID, text)

	// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–µ–π —Ä–∞—Å—Ö–æ–¥–æ–≤
	var message string
	for _, exp := range expenses {
		message += fmt.Sprintf("üìÖ %s: %.2f‚ÇΩ - %s %s - %s", exp.Date.Format("02.01.2006"), exp.Amount, exp.CategoryIcon, exp.Category, exp.Description)

	}
	b.SendMessage(chatID, message)
}
